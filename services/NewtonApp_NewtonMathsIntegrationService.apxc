@isTest
public class NewtonApp_NewtonMathsIntegrationTest {

    @isTest static void ShouldFailWhenInvalidOperation(){
        string result = NewtonApp_NewtonMathsIntegrationService.getOperationResult('dsadsad','2^2+2(2)');
		System.assertEquals('Invalid operation', result);
    }
    
    @isTest static void ShouldFailWhenInvalidExpression(){
        StaticResourceCalloutMock mock = new StaticResourceCalloutMock();
        
        mock.setStaticResource('GetNewtonOperationResource');
        mock.setStatusCode(500);
        mock.setHeader('Content-Type', 'application/json;charset=UTF-8');
        
        Test.setMock(HttpCalloutMock.class, mock);
        
        string result = NewtonApp_NewtonMathsIntegrationService.getOperationResult('area','54534543');
		System.assertEquals('Ups, something went wrong, try again.', result);
    }
    
    @isTest static void ShouldReturnCorrectResultForFactor(){
        StaticResourceCalloutMock mock = new StaticResourceCalloutMock();
        
        mock.setStaticResource('GetNewtonOperationFactorResource');
        mock.setStatusCode(200);
        mock.setHeader('Content-Type', 'application/json;charset=UTF-8');
        
        Test.setMock(HttpCalloutMock.class, mock);
        
        string result = NewtonApp_NewtonMathsIntegrationService.getOperationResult('factor','x^2 + 2x');
        
		System.assertEquals('x (x + 2)', result);
    }
    
    @isTest static void ShouldReturnCorrectResultForSimplify(){
        StaticResourceCalloutMock mock = new StaticResourceCalloutMock();
        
        mock.setStaticResource('GetNewtonOperationSimplifyResource');
        mock.setStatusCode(200);
        mock.setHeader('Content-Type', 'application/json;charset=UTF-8');
        
        Test.setMock(HttpCalloutMock.class, mock);
        
        string result = NewtonApp_NewtonMathsIntegrationService.getOperationResult('simplify','2^2+2(2)');
        
		System.assertEquals('8', result);
    }
    
    @isTest static void ShouldReturnCorrectResultForArea(){
        StaticResourceCalloutMock mock = new StaticResourceCalloutMock();
        
        mock.setStaticResource('GetNewtonOperationAreaResource');
        mock.setStatusCode(200);
        mock.setHeader('Content-Type', 'application/json;charset=UTF-8');
        
        Test.setMock(HttpCalloutMock.class, mock);
        
        string result = NewtonApp_NewtonMathsIntegrationService.getOperationResult('area','2:4lx^3');
        
		System.assertEquals('60', result);
    }
    
    @isTest static void ShouldCorrectlyExecuteMethod(){
        StaticResourceCalloutMock mock = new StaticResourceCalloutMock();
        
        mock.setStaticResource('GetNewtonOperationAreaResource');
        mock.setStatusCode(200);
        mock.setHeader('Content-Type', 'application/json;charset=UTF-8');
        
        Test.setMock(HttpCalloutMock.class, mock);
        
        Math_Operation__c[] newMathOperations = new Math_Operation__c[2];
        
        Math_Operation__c op1 = new Math_Operation__c(Id = Id.valueOf('a005e000005qjI0AAI'), Operation_Type__c = 'area', Expression__c = '2:4lx^3');
        
        newMathOperations[0] = op1;
        
        Math_Operation__c op2 = new Math_Operation__c(Id = Id.valueOf('a005e000005qjTtAAI'), Operation_Type__c = 'simplify', Expression__c = '2^2+2(2)');
        
        newMathOperations[1] = op2;
        
        NewtonApp_NewtonMathsIntegrationService.setMathOperationResultForLastFiveOperations(newMathOperations);
    }
    
    @isTest static void ShouldCorrectlyExecuteMethodWhenArrayIsEmpty(){
        StaticResourceCalloutMock mock = new StaticResourceCalloutMock();
        
        mock.setStaticResource('GetNewtonOperationAreaResource');
        mock.setStatusCode(200);
        mock.setHeader('Content-Type', 'application/json;charset=UTF-8');
        
        Test.setMock(HttpCalloutMock.class, mock);
        
        Math_Operation__c[] newMathOperations;
        
        NewtonApp_NewtonMathsIntegrationService.setMathOperationResultForLastFiveOperations(newMathOperations);
    }
    
}
